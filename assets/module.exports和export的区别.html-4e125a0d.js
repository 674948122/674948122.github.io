const e=JSON.parse(`{"key":"v-2cceed44","path":"/%E6%9D%82%E9%A1%B9/module.exports%E5%92%8Cexport%E7%9A%84%E5%8C%BA%E5%88%AB.html","title":"module.exports和export的区别","lang":"zh-CN","frontmatter":{"title":"module.exports和export的区别","tag":["module.exports","export"],"description":"在Node.js和CommonJS模块系统中，有两种主要的导出方式：module.exports 和 exports。它们之间的关系是比较容易混淆的，因为它们实际上引用的是同一个对象。 module.exports： module.exports 是一个完整的对象，最初是一个空对象 {}。 如果你希望将整个模块作为一个对象导出，你会直接给 module.exports 赋值。 示例： // exampleModule.js module.exports = { key: 'value', func: function() { // some code } }; exports： exports 实际上只是 module.exports 的一个引用。在模块的顶层，exports 是指向 module.exports 的。 如果你将某个值直接赋给 exports，它会断开与 module.exports 的引用关系，从而无法正确导出。 示例： // exampleModule.js exports.key = 'value'; // This is fine exports.func = function() { // some code }; 但是，下面这种方式是不正确的： // exampleModule.js exports = { key: 'value', // This will not work as expected func: function() { // some code } }; 这是因为这里将 exports 重新赋值了，导致它不再指向 module.exports。","head":[["meta",{"property":"og:url","content":"https://674948122.github.io/%E6%9D%82%E9%A1%B9/module.exports%E5%92%8Cexport%E7%9A%84%E5%8C%BA%E5%88%AB.html"}],["meta",{"property":"og:title","content":"module.exports和export的区别"}],["meta",{"property":"og:description","content":"在Node.js和CommonJS模块系统中，有两种主要的导出方式：module.exports 和 exports。它们之间的关系是比较容易混淆的，因为它们实际上引用的是同一个对象。 module.exports： module.exports 是一个完整的对象，最初是一个空对象 {}。 如果你希望将整个模块作为一个对象导出，你会直接给 module.exports 赋值。 示例： // exampleModule.js module.exports = { key: 'value', func: function() { // some code } }; exports： exports 实际上只是 module.exports 的一个引用。在模块的顶层，exports 是指向 module.exports 的。 如果你将某个值直接赋给 exports，它会断开与 module.exports 的引用关系，从而无法正确导出。 示例： // exampleModule.js exports.key = 'value'; // This is fine exports.func = function() { // some code }; 但是，下面这种方式是不正确的： // exampleModule.js exports = { key: 'value', // This will not work as expected func: function() { // some code } }; 这是因为这里将 exports 重新赋值了，导致它不再指向 module.exports。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-10-10T02:22:42.000Z"}],["meta",{"property":"article:author","content":"Mr.PDG"}],["meta",{"property":"article:tag","content":"module.exports"}],["meta",{"property":"article:tag","content":"export"}],["meta",{"property":"article:modified_time","content":"2023-10-10T02:22:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"module.exports和export的区别\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-10-10T02:22:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.PDG\\",\\"url\\":\\"https://674948122.github.io/\\"}]}"]]},"headers":[],"git":{"createdTime":1696904562000,"updatedTime":1696904562000,"contributors":[{"name":"pandegong","email":"674948122@qq.com","commits":1}]},"readingTime":{"minutes":1.08,"words":325},"filePathRelative":"杂项/module.exports和export的区别.md","localizedDate":"2023年10月10日","excerpt":"<p>在Node.js和CommonJS模块系统中，有两种主要的导出方式：<code>module.exports</code> 和 <code>exports</code>。它们之间的关系是比较容易混淆的，因为它们实际上引用的是同一个对象。</p>\\n<ol>\\n<li>\\n<p><strong><code>module.exports</code>：</strong></p>\\n<ul>\\n<li><code>module.exports</code> 是一个完整的对象，最初是一个空对象 <code>{}</code>。</li>\\n<li>如果你希望将整个模块作为一个对象导出，你会直接给 <code>module.exports</code> 赋值。</li>\\n<li>示例：</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// exampleModule.js</span>\\nmodule<span class=\\"token punctuation\\">.</span>exports <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'value'</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token function-variable function\\">func</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// some code</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><strong><code>exports</code>：</strong></p>\\n<ul>\\n<li><code>exports</code> 实际上只是 <code>module.exports</code> 的一个引用。在模块的顶层，<code>exports</code> 是指向 <code>module.exports</code> 的。</li>\\n<li>如果你将某个值直接赋给 <code>exports</code>，它会断开与 <code>module.exports</code> 的引用关系，从而无法正确导出。</li>\\n<li>示例：</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// exampleModule.js</span>\\nexports<span class=\\"token punctuation\\">.</span>key <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'value'</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// This is fine</span>\\nexports<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">func</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">// some code</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>但是，下面这种方式是不正确的：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token comment\\">// exampleModule.js</span>\\nexports <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token literal-property property\\">key</span><span class=\\"token operator\\">:</span> <span class=\\"token string\\">'value'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token comment\\">// This will not work as expected</span>\\n    <span class=\\"token function-variable function\\">func</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// some code</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p>这是因为这里将 <code>exports</code> 重新赋值了，导致它不再指向 <code>module.exports</code>。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{e as data};
