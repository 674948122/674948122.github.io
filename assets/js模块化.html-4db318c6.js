const e=JSON.parse('{"key":"v-29c9a9af","path":"/%E6%9D%82%E9%A1%B9/js%E6%A8%A1%E5%9D%97%E5%8C%96.html","title":"js模块化","lang":"zh-CN","frontmatter":{"description":"js模块化 一、什么是模块化 在js刚刚出现的时候，是为了实现一些简单的功能，但随着浏览器的不断发展，js越来越被重视起来，可以实现较为复杂的功能。这个时候开发者为了维护方便，会把不同功能的模块抽离出来写入单独的js文件，但是当项目更为复杂的时候，html可能会引入很多个js文件，而这个时候就会出现命名冲突，污染作用域等一系列问题，这个时候模块化的概念及实现方法应运而生。 模块化开发是一种管理方式，一种生产方式，一种解决问题的方案。一个模块就是实现某个特定功能的文件，我们可以很方便的使用别人的代码，想要什么模块，就引入那个模块。但是模块开发要遵循一定的规范，后面就出现了我们所熟悉的AMD和CMD规范。","head":[["meta",{"property":"og:url","content":"https://674948122.github.io/doc/%E6%9D%82%E9%A1%B9/js%E6%A8%A1%E5%9D%97%E5%8C%96.html"}],["meta",{"property":"og:title","content":"js模块化"}],["meta",{"property":"og:description","content":"js模块化 一、什么是模块化 在js刚刚出现的时候，是为了实现一些简单的功能，但随着浏览器的不断发展，js越来越被重视起来，可以实现较为复杂的功能。这个时候开发者为了维护方便，会把不同功能的模块抽离出来写入单独的js文件，但是当项目更为复杂的时候，html可能会引入很多个js文件，而这个时候就会出现命名冲突，污染作用域等一系列问题，这个时候模块化的概念及实现方法应运而生。 模块化开发是一种管理方式，一种生产方式，一种解决问题的方案。一个模块就是实现某个特定功能的文件，我们可以很方便的使用别人的代码，想要什么模块，就引入那个模块。但是模块开发要遵循一定的规范，后面就出现了我们所熟悉的AMD和CMD规范。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-25T10:30:14.000Z"}],["meta",{"property":"article:author","content":"Mr.PDG"}],["meta",{"property":"article:modified_time","content":"2023-04-25T10:30:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js模块化\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-25T10:30:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.PDG\\",\\"url\\":\\"https://674948122.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"一、什么是模块化","slug":"一、什么是模块化","link":"#一、什么是模块化","children":[]},{"level":2,"title":"二、立即执行函数","slug":"二、立即执行函数","link":"#二、立即执行函数","children":[]},{"level":2,"title":"三、AMD","slug":"三、amd","link":"#三、amd","children":[{"level":3,"title":"1、定义模块","slug":"_1、定义模块","link":"#_1、定义模块","children":[]},{"level":3,"title":"2、加载模块","slug":"_2、加载模块","link":"#_2、加载模块","children":[]}]},{"level":2,"title":"四、CMD","slug":"四、cmd","link":"#四、cmd","children":[{"level":3,"title":"1、定义模块","slug":"_1、定义模块-1","link":"#_1、定义模块-1","children":[]},{"level":3,"title":"2、加载模块","slug":"_2、加载模块-1","link":"#_2、加载模块-1","children":[]},{"level":3,"title":"3、AMD与CMD的不同","slug":"_3、amd与cmd的不同","link":"#_3、amd与cmd的不同","children":[]}]},{"level":2,"title":"五、UMD","slug":"五、umd","link":"#五、umd","children":[]},{"level":2,"title":"六、CommonJS","slug":"六、commonjs","link":"#六、commonjs","children":[{"level":3,"title":"1、定义模块","slug":"_1、定义模块-2","link":"#_1、定义模块-2","children":[]},{"level":3,"title":"2、加载模块","slug":"_2、加载模块-2","link":"#_2、加载模块-2","children":[]}]},{"level":2,"title":"七、ES Module","slug":"七、es-module","link":"#七、es-module","children":[{"level":3,"title":"1、定义模块","slug":"_1、定义模块-3","link":"#_1、定义模块-3","children":[]},{"level":3,"title":"2、加载模块","slug":"_2、加载模块-3","link":"#_2、加载模块-3","children":[]},{"level":3,"title":"3、和CommonJS的区别","slug":"_3、和commonjs的区别","link":"#_3、和commonjs的区别","children":[]}]},{"level":2,"title":"八、总结","slug":"八、总结","link":"#八、总结","children":[]}],"git":{"createdTime":1682418614000,"updatedTime":1682418614000,"contributors":[{"name":"pandegong","email":"674948122@qq.com","commits":1}]},"readingTime":{"minutes":12.41,"words":3724},"filePathRelative":"杂项/js模块化.md","localizedDate":"2023年4月25日","excerpt":"<h1> js模块化</h1>\\n<h2> 一、什么是模块化</h2>\\n<p>在js刚刚出现的时候，是为了实现一些简单的功能，但随着浏览器的不断发展，js越来越被重视起来，可以实现较为复杂的功能。这个时候开发者为了维护方便，会把不同功能的模块抽离出来写入单独的js文件，但是当项目更为复杂的时候，html可能会引入很多个js文件，而这个时候就会出现命名冲突，污染作用域等一系列问题，这个时候模块化的概念及实现方法应运而生。</p>\\n<p>模块化开发是一种管理方式，一种生产方式，一种解决问题的方案。一个模块就是实现某个特定功能的文件，我们可以很方便的使用别人的代码，想要什么模块，就引入那个模块。但是模块开发要遵循一定的规范，后面就出现了我们所熟悉的AMD和CMD规范。</p>","autoDesc":true}');export{e as data};
