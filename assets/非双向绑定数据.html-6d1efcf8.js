import{_ as n,X as s,Y as a,$ as e}from"./framework-0dc5846b.js";const t={},p=e(`<h1 id="非双向绑定数据" tabindex="-1"><a class="header-anchor" href="#非双向绑定数据" aria-hidden="true">#</a> 非双向绑定数据</h1><h2 id="长列表以及不需要数据劫持的场景" tabindex="-1"><a class="header-anchor" href="#长列表以及不需要数据劫持的场景" aria-hidden="true">#</a> 长列表以及不需要数据劫持的场景</h2><p><code>Vue</code> 会通过 <code>Object.defineProperty</code> 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的数据展示，不会有任何改变，我们就不需要 <code>Vue</code> 来劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，那如何禁止 <code>Vue</code> 劫持我们的数据呢？</p><p>可以通过 <code>Object.freeze()</code> (冻结) 方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了。或者可以用 <code>Object.seal()</code> (密封)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">users</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">async</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/api/users&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>users <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),c=[p];function o(i,u){return s(),a("div",null,c)}const r=n(t,[["render",o],["__file","非双向绑定数据.html.vue"]]);export{r as default};
