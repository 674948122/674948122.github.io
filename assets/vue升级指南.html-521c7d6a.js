const e=JSON.parse('{"key":"v-3e7a2872","path":"/Vue2%E5%8D%87%E7%BA%A7Vue3/vue%E5%8D%87%E7%BA%A7%E6%8C%87%E5%8D%97.html","title":"vue升级指南","lang":"zh-CN","frontmatter":{"title":"vue升级指南","description":"vue3 优点 增加了代码的可维护性 Vue2 使用的是 options 的API ，代码逻辑比较分散，可读性差，可维护性差。Vue3 使用的是 compositionAPI 逻辑分明，可维护性高，更友好的支持TS。在 template 模板中支持多个根节点，支持jsx语法。 提升了页面渲染性能 Vue3 在更新DOM算法上，做了优化。在 Vue2 中,每次更新diff，都是全量对比，Vue3则只对比带有标记的，这样大大减少了非动态内容的对比消耗。 加强了 MVVM 双向数据绑定的效率 Vue2 的双向数据绑定是利用 ES5 的 Object.definePropert() 对对象属性进行劫持，结合 发布订阅模式的方式来实现的。Vue3 中使用了 es6 的 ProxyAPI 对数据代理。 相比于vue2.x，使用proxy的优势如下：","head":[["meta",{"property":"og:url","content":"https://674948122.github.io/Vue2%E5%8D%87%E7%BA%A7Vue3/vue%E5%8D%87%E7%BA%A7%E6%8C%87%E5%8D%97.html"}],["meta",{"property":"og:title","content":"vue升级指南"}],["meta",{"property":"og:description","content":"vue3 优点 增加了代码的可维护性 Vue2 使用的是 options 的API ，代码逻辑比较分散，可读性差，可维护性差。Vue3 使用的是 compositionAPI 逻辑分明，可维护性高，更友好的支持TS。在 template 模板中支持多个根节点，支持jsx语法。 提升了页面渲染性能 Vue3 在更新DOM算法上，做了优化。在 Vue2 中,每次更新diff，都是全量对比，Vue3则只对比带有标记的，这样大大减少了非动态内容的对比消耗。 加强了 MVVM 双向数据绑定的效率 Vue2 的双向数据绑定是利用 ES5 的 Object.definePropert() 对对象属性进行劫持，结合 发布订阅模式的方式来实现的。Vue3 中使用了 es6 的 ProxyAPI 对数据代理。 相比于vue2.x，使用proxy的优势如下："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-15T03:00:51.000Z"}],["meta",{"property":"article:author","content":"Mr.PDG"}],["meta",{"property":"article:modified_time","content":"2023-05-15T03:00:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vue升级指南\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-15T03:00:51.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.PDG\\",\\"url\\":\\"https://674948122.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"vue3 优点","slug":"vue3-优点","link":"#vue3-优点","children":[]},{"level":2,"title":"升级存在的隐患","slug":"升级存在的隐患","link":"#升级存在的隐患","children":[]},{"level":2,"title":"参考文档","slug":"参考文档","link":"#参考文档","children":[]},{"level":2,"title":"代码规范","slug":"代码规范","link":"#代码规范","children":[]},{"level":2,"title":"构建工具 Vite","slug":"构建工具-vite","link":"#构建工具-vite","children":[]},{"level":2,"title":"运行要求","slug":"运行要求","link":"#运行要求","children":[]},{"level":2,"title":"项目目录结构","slug":"项目目录结构","link":"#项目目录结构","children":[]},{"level":2,"title":"语法和Api的改变","slug":"语法和api的改变","link":"#语法和api的改变","children":[{"level":3,"title":"全局 API","slug":"全局-api","link":"#全局-api","children":[]},{"level":3,"title":"模板指令","slug":"模板指令","link":"#模板指令","children":[]},{"level":3,"title":"组件","slug":"组件","link":"#组件","children":[]},{"level":3,"title":"渲染函数","slug":"渲染函数","link":"#渲染函数","children":[]},{"level":3,"title":"自定义元素","slug":"自定义元素","link":"#自定义元素","children":[]},{"level":3,"title":"其他小改变","slug":"其他小改变","link":"#其他小改变","children":[]},{"level":3,"title":"被移除的 API","slug":"被移除的-api","link":"#被移除的-api","children":[]}]}],"git":{"createdTime":1684119651000,"updatedTime":1684119651000,"contributors":[{"name":"pandegong","email":"674948122@qq.com","commits":1}]},"readingTime":{"minutes":5.16,"words":1547},"filePathRelative":"Vue2升级Vue3/vue升级指南.md","localizedDate":"2023年5月15日","excerpt":"<h2> vue3 优点</h2>\\n<ol>\\n<li>\\n<p>增加了代码的可维护性\\nVue2 使用的是 options 的API ，代码逻辑比较分散，可读性差，可维护性差。Vue3 使用的是 compositionAPI 逻辑分明，可维护性高，更友好的支持TS。在 template 模板中支持多个根节点，支持jsx语法。</p>\\n</li>\\n<li>\\n<p>提升了页面渲染性能\\nVue3 在更新DOM算法上，做了优化。在 Vue2 中,每次更新diff，都是全量对比，Vue3则只对比带有标记的，这样大大减少了非动态内容的对比消耗。</p>\\n</li>\\n<li>\\n<p>加强了 MVVM 双向数据绑定的效率\\nVue2 的双向数据绑定是利用 ES5 的 Object.definePropert() 对对象属性进行劫持，结合 发布订阅模式的方式来实现的。Vue3 中使用了 es6 的 ProxyAPI 对数据代理。\\n相比于vue2.x，使用proxy的优势如下：</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
