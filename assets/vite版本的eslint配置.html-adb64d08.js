import{_ as a,X as t,Y as i,$ as n,a0 as o,a1 as c,Z as e,E as p}from"./framework-cddc4983.js";const d={},l=e('<h2 id="eslint配置" tabindex="-1"><a class="header-anchor" href="#eslint配置" aria-hidden="true">#</a> eslint配置</h2><h3 id="vite-pretty-lint" tabindex="-1"><a class="header-anchor" href="#vite-pretty-lint" aria-hidden="true">#</a> vite-pretty-lint</h3><p><code>vite-pretty-lint</code>库是一个为<code>Vite</code>创建的<code>Vue</code>或<code>React</code>项目初始化<code>eslint</code>和<code>prettier</code>的库。</p><p>该库的目的是为了让开发者在创建项目时，不需要手动配置<code>eslint</code>和<code>prettier</code>，而是通过<code>vite-pretty-lint</code>库来自动配置。</p>',4),r={href:"https://www.npmjs.com/package/create-vite-pretty-lint",target:"_blank",rel:"noopener noreferrer"},u=e(`<h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><p>进入项目目录运行命令,3种任选，这里我选择<code>pnpm</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// NPM
<span class="token function">npm</span> init vite-pretty-lint

// YARN
<span class="token function">yarn</span> create vite-pretty-lint

// PNPM
<span class="token function">pnpm</span> create vite-pretty-lint
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里会有一些选项，根据自己项目的实际情况选择即可，一路回车。</p><p>安装完成之后，可以发现目录下多了几个文件，分别是 <code>.eslintrc.json</code> 、<code>.eslintignore</code>、 <code>.prettierrc.json</code>。这就是通过以上命令生成的 <code>eslint</code> 和 <code>prettier</code> 相关配置文件。</p><p>它还会自动修改<code>vite.config.js</code>文件，添加<code>eslint</code>相关配置。</p><p>如果你的项目结构不是默认的，那么你需要手动修改<code>vite.config.js</code>文件，添加<code>eslint</code>相关配置。</p><h3 id="修改-eslintrc-json" tabindex="-1"><a class="header-anchor" href="#修改-eslintrc-json" aria-hidden="true">#</a> 修改<code>.eslintrc.json</code></h3><p>这里是因为<code>vite-plugin-eslint</code>不识别<code>json</code>文件，所以需要修改为<code>js</code>文件。</p><p>除了文件后缀名，内容也要修改，<code>json</code>开头就是<code>{}</code>, <code>js</code>开头是<code>module.exports = {}</code></p><h3 id="unplugin-auto-import-vite冲突问题" tabindex="-1"><a class="header-anchor" href="#unplugin-auto-import-vite冲突问题" aria-hidden="true">#</a> <code>unplugin-auto-import/vite</code>冲突问题</h3><p>如果你的项目里使用了<code>unplugin-auto-import/vite</code>自动引入插件，那么可能会导致eslint报错。</p><p>修改<code>unplugin-auto-import/vite</code>配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> autoImport <span class="token keyword">from</span> <span class="token string">&#39;unplugin-auto-import/vite&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createAutoImport</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">autoImport</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">imports</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;vue&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vue-router&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pinia&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">dts</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">eslintrc</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// 平时关闭，自动引入配置更新时开启一次</span>
      <span class="token literal-property property">enabled</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将<code>eslintrc.enabled</code>改成<code>true</code>后，运行项目，会在项目根目录生成文件<code>.eslintrc-auto-import.json</code></p><p>将这个文件引入到<code>.eslintrc.js</code>中</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;./.eslintrc-auto-import.json&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>至此<code>eslint</code>和<code>prettier</code>的配置就基本完成了，如果你的项目中还有其他的<code>eslint</code>配置，可以在<code>.eslintrc.js</code>中添加。</p><h2 id="husky代码提交钩子" tabindex="-1"><a class="header-anchor" href="#husky代码提交钩子" aria-hidden="true">#</a> husky代码提交钩子</h2><h3 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> husky lint-staged commitizen commitlint cz-customizable commitlint-config-cz @commitlint/config-conventional
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="添加初始化命令" tabindex="-1"><a class="header-anchor" href="#添加初始化命令" aria-hidden="true">#</a> 添加初始化命令</h3><p>运行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> set-script prepare <span class="token string">&quot;husky install&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这条命令会在<code>package.json</code>中添加<code>prepare</code>脚本</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;husky install&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="husky初始化" tabindex="-1"><a class="header-anchor" href="#husky初始化" aria-hidden="true">#</a> husky初始化</h3><p>运行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run prepare
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化 <code>husky</code>，将 <code>git hooks</code> 钩子交由 <code>husky</code> 执行，它会在项目根目录创建文件夹<code>.husky</code></p><h3 id="git钩子配置" tabindex="-1"><a class="header-anchor" href="#git钩子配置" aria-hidden="true">#</a> git钩子配置</h3><p>运行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npx lint-staged --allow-empty&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会在 <code>.husky</code> 里面生成一个 <code>pre-commit</code> 文件，在 <code>pre-commit</code> 这个钩子里就可以执行 <code>lint-staged</code> 了</p><p>在 <code>package.json</code> 中添加以下内容，处理对应后缀的文件</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;*.{js,vue}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;eslint --fix&quot;</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里为止，提交代码的时候自动进行代码检查的功能已经实现了</p>`,38);function v(m,h){const s=p("ExternalLinkIcon");return t(),i("div",null,[l,n("p",null,[n("a",r,[o("文档链接"),c(s)])]),u])}const b=a(d,[["render",v],["__file","vite版本的eslint配置.html.vue"]]);export{b as default};
