const e=JSON.parse('{"key":"v-22dedba5","path":"/%E6%9D%82%E9%A1%B9/Promise%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97.html","title":"Promise任务队列","lang":"zh-CN","frontmatter":{"title":"Promise任务队列","tag":["JavaScript","Promise","任务队列"],"description":"FunctionExecutor 类 FunctionExecutor 是一个函数执行器的类，它用于确保在一个函数执行完毕之前，不会执行下一个函数。它的主要作用是管理函数的执行顺序和控制函数之间的并发。 构造函数 FunctionExecutor() 创建一个 FunctionExecutor 类的实例。 方法 execute(func: Function, ...args: any[]): Promise","head":[["meta",{"property":"og:url","content":"https://674948122.github.io/doc/%E6%9D%82%E9%A1%B9/Promise%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97.html"}],["meta",{"property":"og:title","content":"Promise任务队列"}],["meta",{"property":"og:description","content":"FunctionExecutor 类 FunctionExecutor 是一个函数执行器的类，它用于确保在一个函数执行完毕之前，不会执行下一个函数。它的主要作用是管理函数的执行顺序和控制函数之间的并发。 构造函数 FunctionExecutor() 创建一个 FunctionExecutor 类的实例。 方法 execute(func: Function, ...args: any[]): Promise"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-17T04:00:26.000Z"}],["meta",{"property":"article:author","content":"Mr.PDG"}],["meta",{"property":"article:tag","content":"JavaScript"}],["meta",{"property":"article:tag","content":"Promise"}],["meta",{"property":"article:tag","content":"任务队列"}],["meta",{"property":"article:modified_time","content":"2023-05-17T04:00:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Promise任务队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-17T04:00:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.PDG\\",\\"url\\":\\"https://674948122.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"FunctionExecutor 类","slug":"functionexecutor-类","link":"#functionexecutor-类","children":[]},{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[{"level":3,"title":"FunctionExecutor()","slug":"functionexecutor","link":"#functionexecutor","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"execute(func: Function, ...args: any[]): Promise","slug":"execute-func-function-args-any-promise","link":"#execute-func-function-args-any-promise","children":[]}]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"源码","slug":"源码","link":"#源码","children":[]}],"git":{"createdTime":1684296026000,"updatedTime":1684296026000,"contributors":[{"name":"pandegong","email":"674948122@qq.com","commits":1}]},"readingTime":{"minutes":0.87,"words":262},"filePathRelative":"杂项/Promise任务队列.md","localizedDate":"2023年5月17日","excerpt":"<h2> FunctionExecutor 类</h2>\\n<p><code>FunctionExecutor</code> 是一个函数执行器的类，它用于确保在一个函数执行完毕之前，不会执行下一个函数。它的主要作用是管理函数的执行顺序和控制函数之间的并发。</p>\\n<h2> 构造函数</h2>\\n<h3> <code>FunctionExecutor()</code></h3>\\n<p>创建一个 <code>FunctionExecutor</code> 类的实例。</p>\\n<h2> 方法</h2>\\n<h3> <code>execute(func: Function, ...args: any[]): Promise</code></h3>","autoDesc":true}');export{e as data};
