import{_ as s,X as t,Y as r,$ as e,a0 as i,a1 as a,Z as l,E as o}from"./framework-cddc4983.js";const d={},c=l('<h2 id="vue3-优点" tabindex="-1"><a class="header-anchor" href="#vue3-优点" aria-hidden="true">#</a> vue3 优点</h2><ol><li><p>增加了代码的可维护性 Vue2 使用的是 options 的API ，代码逻辑比较分散，可读性差，可维护性差。Vue3 使用的是 compositionAPI 逻辑分明，可维护性高，更友好的支持TS。在 template 模板中支持多个根节点，支持jsx语法。</p></li><li><p>提升了页面渲染性能 Vue3 在更新DOM算法上，做了优化。在 Vue2 中,每次更新diff，都是全量对比，Vue3则只对比带有标记的，这样大大减少了非动态内容的对比消耗。</p></li><li><p>加强了 MVVM 双向数据绑定的效率 Vue2 的双向数据绑定是利用 ES5 的 Object.definePropert() 对对象属性进行劫持，结合 发布订阅模式的方式来实现的。Vue3 中使用了 es6 的 ProxyAPI 对数据代理。 相比于vue2.x，使用proxy的优势如下：</p></li></ol><p>defineProperty只能监听某个属性，不能对全对象监听 可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可） 可以监听数组，不用再去单独的对数组做特异性操作 vue3.x 可以检测到数组内部数据的变化 4. 项目可持续发展 Vue 2官方还会再维护两年，但两年后的问题和需求，官方就不承诺修复和提供解答了，Vue 3 则不会。</p><p>当然，还有其他的，这里只是列出几个主要的。</p><h2 id="升级存在的隐患" tabindex="-1"><a class="header-anchor" href="#升级存在的隐患" aria-hidden="true">#</a> 升级存在的隐患</h2><ol><li>新的响应式系统用了 Proxy，会存在兼容性问题（不支持IE）。</li><li>框架底层进行了大量重构，新增和删除了很多原来的API，代码结构也发生了变化。很多地方需要进行破坏性修改，从而容易导致各种问题的出现。</li><li>项目使用到的第三方插件和 UI框架（Element）也需要替换和更改成 对应Vue3可用版本。</li></ol><h2 id="参考文档" tabindex="-1"><a class="header-anchor" href="#参考文档" aria-hidden="true">#</a> 参考文档</h2>',7),p={href:"https://v3.cn.vuejs.org/guide/introduction.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://router.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://pinia.web3doc.top/",target:"_blank",rel:"noopener noreferrer"},u={href:"http://www.axios-js.com/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://element-plus.gitee.io/zh-CN/guide/design.html",target:"_blank",rel:"noopener noreferrer"},b=l('<h2 id="代码规范" tabindex="-1"><a class="header-anchor" href="#代码规范" aria-hidden="true">#</a> 代码规范</h2><p>使用 Prettier + ESLint + Husky 组合来实现代码规范化。</p><p>这样做带来好处：</p><ol><li>解决团队之间代码不规范导致的可读性差和可维护性差的问题。</li><li>解决团队成员不同编辑器导致的编码规范不统一问题。</li><li>提前发现代码风格问题，给出对应规范提示，及时修复。 减少代码审查过程中反反复复的修改过程，节约时间。</li><li>自动格式化，统一编码风格，从此和脏乱差的代码说再见。</li></ol><p>VSCode 编辑器 需要去插件市场下载插件 Prettier - Code formatter、ESLint。</p><h2 id="构建工具-vite" tabindex="-1"><a class="header-anchor" href="#构建工具-vite" aria-hidden="true">#</a> 构建工具 Vite</h2>',6),f={href:"https://vitejs.cn/",target:"_blank",rel:"noopener noreferrer"},_=l(`<h2 id="运行要求" tabindex="-1"><a class="header-anchor" href="#运行要求" aria-hidden="true">#</a> 运行要求</h2><p>Vue 版本：3.0以上</p><p>node 版本：Vite 需要 Node.js 版本 &gt;= 12.0.0 我们要求为16.15.0</p><p>pnpm</p><p>nvm或者volta</p><p>浏览器：非IE浏览器</p><h2 id="项目目录结构" tabindex="-1"><a class="header-anchor" href="#项目目录结构" aria-hidden="true">#</a> 项目目录结构</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── README.md
├── html
│   └── ie.html           <span class="token comment"># 兼容IE的html</span>
├── index.html            <span class="token comment"># 入口html</span>
├── package.json          <span class="token comment"># 项目依赖</span>
├── pnpm-lock.yaml        <span class="token comment"># pnpm依赖</span>
├── public                <span class="token comment"># 静态资源</span>
│   └── favicon.ico
├── src
│   ├── App.vue           <span class="token comment"># 入口组件</span>
│   ├── api               <span class="token comment"># 接口</span>
│   ├── assets            <span class="token comment"># 静态资源</span>
│   ├── components        <span class="token comment"># 全局公共组件</span>
│   ├── directive         <span class="token comment"># 自定义指令</span>
│   ├── layout            <span class="token comment"># 布局</span>
│   ├── main.js           <span class="token comment"># 项目入口文件</span>
│   ├── permission.js     <span class="token comment"># 路由权限</span>
│   ├── plugins           <span class="token comment"># 公共方法</span>
│   ├── router            <span class="token comment"># 路由</span>
│   ├── settings.js       <span class="token comment"># 项目配置文件（标题、主题等等）</span>
│   ├── store             <span class="token comment"># 全局状态管理</span>
│   ├── utils             <span class="token comment"># 工具类</span>
│   └── views             <span class="token comment"># 页面</span>
├── vite                  <span class="token comment"># vite插件</span>
│   └── plugins
└── vite.config.js        <span class="token comment"># vite配置文件</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="语法和api的改变" tabindex="-1"><a class="header-anchor" href="#语法和api的改变" aria-hidden="true">#</a> 语法和Api的改变</h2>`,9),k={href:"https://v3-migration.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},x=l('<h3 id="全局-api" tabindex="-1"><a class="header-anchor" href="#全局-api" aria-hidden="true">#</a> 全局 API</h3><ol><li>全局 Vue API 已更改为使用应用程序实例</li><li>全局和内部 API 已经被重构为支持 tree-shake</li></ol><h3 id="模板指令" tabindex="-1"><a class="header-anchor" href="#模板指令" aria-hidden="true">#</a> 模板指令</h3><ol><li>组件上 v-model 用法已更改，以替换 v-bind.sync</li><li><code>&lt;template v-for&gt;</code> 和非 v-for 节点上的 key用法已更改</li><li>在同一元素上使用的 v-if 和 v-for 优先级已更改</li><li>v-bind=“object” 现在排序敏感</li><li>v-on:event.native 修饰符已移除</li><li>v-for 中的 ref 不再注册 ref 数组</li></ol><h3 id="组件" tabindex="-1"><a class="header-anchor" href="#组件" aria-hidden="true">#</a> 组件</h3><ol><li>只能使用普通函数创建函数式组件</li><li>functional attribute 在单文件组件 (SFC) 的 <code>&lt;template&gt;</code>和 functional 组件选项中被废弃</li><li>异步组件现在需要使用 defineAsyncComponent 方法来创建</li><li>组件事件现在需要在 emits 选项中声明</li></ol><h3 id="渲染函数" tabindex="-1"><a class="header-anchor" href="#渲染函数" aria-hidden="true">#</a> 渲染函数</h3><ol><li>渲染函数 API 更改</li><li>$scopedSlots property 已移除，所有插槽都通过 $slots 作为函数暴露</li><li>$listeners 被移除或整合到 $attrs</li><li>$attrs 现在包含 class 和 style attribute</li></ol><h3 id="自定义元素" tabindex="-1"><a class="header-anchor" href="#自定义元素" aria-hidden="true">#</a> 自定义元素</h3><ol><li>自定义元素检测现在在模板编译时执行</li><li>特殊的 is attribute 的使用被严格限制在被保留的 <code>&lt;component&gt;</code> 标签中</li></ol><h3 id="其他小改变" tabindex="-1"><a class="header-anchor" href="#其他小改变" aria-hidden="true">#</a> 其他小改变</h3><ol><li>destroyed 生命周期选项被重命名为 unmounted</li><li>beforeDestroy 生命周期选项被重命名为 beforeUnmount</li><li>default prop 工厂函数不再可以访问 this 上下文</li><li>自定义指令的 API 已更改为与组件生命周期一致，且 binding.expression 已移除</li><li>data 选项应始终被声明为一个函数</li><li>来自 mixin 的 data 选项现在为浅合并</li><li>Attribute 强制策略已更改</li><li>一些过渡的 class 被重命名</li><li><code>&lt;TransitionGroup&gt;</code> 不再默认渲染包裹元素</li><li>当侦听一个数组时，只有当数组被替换时，回调才会触发，如果需要在变更时触发，则必须指定 deep 选项</li><li>没有特殊指令的标记 (v-if/else-if/else、v-for 或 v-slot) 的 <code>&lt;template&gt;</code> 现在被视为普通元素，并将渲染为原生的 <code>&lt;template&gt;</code> 元素，而不是渲染其内部内容。</li><li>已挂载的应用不会取代它所挂载的元素</li><li>生命周期的 hook: 事件前缀改为 vnode-</li></ol><h3 id="被移除的-api" tabindex="-1"><a class="header-anchor" href="#被移除的-api" aria-hidden="true">#</a> 被移除的 API</h3><ol><li>keyCode 作为 v-on 修饰符的支持</li><li>on、off 和 $once 实例方法</li><li>过滤器 (filter)</li><li>内联模板 attribute</li><li>$children 实例 property</li><li>propsData 选项</li><li>$destroy 实例方法。用户不应再手动管理单个 Vue 组件的生命周期。</li><li>全局函数 set 和 delete 以及实例方法 $set 和 $delete。基于代理的变化检测已经不再需要它们了。</li></ol>',14);function g(V,P){const n=o("ExternalLinkIcon");return t(),r("div",null,[c,e("p",null,[e("a",p,[i("Vue3官方文档"),a(n)])]),e("p",null,[e("a",h,[i("VueRouter"),a(n)])]),e("p",null,[e("a",m,[i("Pinia"),a(n)])]),e("p",null,[e("a",u,[i("Axios"),a(n)])]),e("p",null,[e("a",v,[i("Element Plus"),a(n)])]),b,e("p",null,[i("Vite@3.2.3 "),e("a",f,[i("文档链接"),a(n)])]),_,e("p",null,[i("官方文档： "),e("a",k,[i("Vue 3 迁移指南"),a(n)])]),x])}const A=s(d,[["render",g],["__file","01.vue升级指南.html.vue"]]);export{A as default};
