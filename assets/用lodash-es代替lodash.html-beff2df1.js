import{_ as s,Q as a,a2 as e,a4 as o}from"./framework-a091056b.js";const t={},d=o(`<h1 id="用lodash-es代替lodash" tabindex="-1"><a class="header-anchor" href="#用lodash-es代替lodash" aria-hidden="true">#</a> 用lodash-es代替lodash</h1><p>lodash为了良好的浏览器兼容性, 它使用了旧版es5的模块语法; 而lodash-es则使用了es6的模块语法, 这让webpack之类的打包工具可以对其进行tree shake以删除为使用的代码来优化打包尺寸.</p><p>下面的代码直接从lodash中引入trimStart方法</p><p><code>import { trimStart } from &#39;lodash&#39;;</code></p><p>如果使用的是webpack进行打包的话, 仅此一行就会导致打包尺寸增加 70+ kb</p><p>而如果把lodash改为lodash-es</p><p><code>import { trimStart } from &#39;lodash-es&#39;;</code></p><p>下面的代码和使用lodash-es进行导入有一样的效果</p><p><code>import trimStart from &#39;lodash/trimStart&#39;;</code></p><p>这是默认导入的语法, 但是这种导入方式当我们需要在一个文件中导入多个lodash方法时就不太方便了</p><p>例如需要trimStart和trimEnd方法, 从lodash-es中导入只需一行</p><p><code>import { trimStart, trimEnd } from &#39;lodash-es&#39;;</code></p><p>而通过默认导入的方式从lodash中导入则需要两行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> trimStart <span class="token keyword">from</span> <span class="token string">&#39;lodash/trimStart&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> trimEnd <span class="token keyword">from</span> <span class="token string">&#39;lodash/trimEnd&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>那么打包尺寸则只会增加 1kb 左右, 70kb对比1kb差距还是十分巨大的.</strong></p><p>通过上面的对比, 如果是使用webpack来进行打包的话, 我们在使用lodash库时, 尽量通过lodash-es来进行导入操作, 以此来避免以此行导入全部lodash代码到最终生产环境的代码.</p>`,16),r=[d];function n(p,l){return a(),e("div",null,r)}const c=s(t,[["render",n],["__file","用lodash-es代替lodash.html.vue"]]);export{c as default};
