import{_ as n,Z as s,$ as a,a1 as e}from"./framework-4b017f08.js";const o={},p=e(`<p>在Node.js和CommonJS模块系统中，有两种主要的导出方式：<code>module.exports</code> 和 <code>exports</code>。它们之间的关系是比较容易混淆的，因为它们实际上引用的是同一个对象。</p><ol><li><p><strong><code>module.exports</code>：</strong></p><ul><li><code>module.exports</code> 是一个完整的对象，最初是一个空对象 <code>{}</code>。</li><li>如果你希望将整个模块作为一个对象导出，你会直接给 <code>module.exports</code> 赋值。</li><li>示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// exampleModule.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// some code</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong><code>exports</code>：</strong></p><ul><li><code>exports</code> 实际上只是 <code>module.exports</code> 的一个引用。在模块的顶层，<code>exports</code> 是指向 <code>module.exports</code> 的。</li><li>如果你将某个值直接赋给 <code>exports</code>，它会断开与 <code>module.exports</code> 的引用关系，从而无法正确导出。</li><li>示例：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// exampleModule.js</span>
exports<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">;</span> <span class="token comment">// This is fine</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// some code</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，下面这种方式是不正确的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// exampleModule.js</span>
exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token comment">// This will not work as expected</span>
    <span class="token function-variable function">func</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// some code</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为这里将 <code>exports</code> 重新赋值了，导致它不再指向 <code>module.exports</code>。</p></li></ol><p>总结一下，这两种方式在实际使用中通常是等效的，但是当你需要导出一个函数或一个构造函数时，你可能会更倾向于使用 <code>module.exports</code>。如果你只是想扩展已经存在的导出对象，<code>exports</code> 是一个更方便的方法。</p>`,3),t=[p];function c(l,i){return s(),a("div",null,t)}const u=n(o,[["render",c],["__file","module.exports和export的区别.html.vue"]]);export{u as default};
