const t=JSON.parse('{"key":"v-6620ee8a","path":"/%E9%9D%A2%E8%AF%95%E9%A2%98/vue3.html","title":"Vue3","lang":"zh-CN","frontmatter":{"description":"Vue3 watch和watchEffect的区别 答案 1.指定依赖项： watch需要开发者明确指定要监听的具体响应式数据，并在回调函数中处理对应的逻辑。 watchEffect则会自动追踪在其函数体内部使用的所有响应式数据，无需手动指定依赖项。 2.执行时机： watch具有一定的惰性，即只有在数据变化时才会执行回调函数。 watchEffect在初始化时一定会执行一次，并且会收集要监听的数据。它更加即时，在页面首次加载时也会执行回调函数，除非设置了immediate: true。 3.获取原始值： watchEffect可以直接获取到原始值，而watch需要通过指定监视的属性来获取对应的值。 4.取消监听： watchEffect可以通过调用stop函数来取消监听。 watch需要通过返回一个取消监听的函数来实现取消监听。 5.使用场景： watch适用于需要监听特定数据或计算属性的变化，并执行相应的回调函数的场景。 watchEffect适用于自动追踪响应式数据并触发副作用的场景，如执行异步操作或更新UI。 综上所述，选择watch或watchEffect取决于具体的使用场景和对API控制的需求。如果需要对响应式数据进行细粒度的控制，可以使用watch API；如果只是需要自动追踪响应式数据并触发副作用，可以使用watchEffect函数。","head":[["meta",{"property":"og:url","content":"https://674948122.github.io/%E9%9D%A2%E8%AF%95%E9%A2%98/vue3.html"}],["meta",{"property":"og:title","content":"Vue3"}],["meta",{"property":"og:description","content":"Vue3 watch和watchEffect的区别 答案 1.指定依赖项： watch需要开发者明确指定要监听的具体响应式数据，并在回调函数中处理对应的逻辑。 watchEffect则会自动追踪在其函数体内部使用的所有响应式数据，无需手动指定依赖项。 2.执行时机： watch具有一定的惰性，即只有在数据变化时才会执行回调函数。 watchEffect在初始化时一定会执行一次，并且会收集要监听的数据。它更加即时，在页面首次加载时也会执行回调函数，除非设置了immediate: true。 3.获取原始值： watchEffect可以直接获取到原始值，而watch需要通过指定监视的属性来获取对应的值。 4.取消监听： watchEffect可以通过调用stop函数来取消监听。 watch需要通过返回一个取消监听的函数来实现取消监听。 5.使用场景： watch适用于需要监听特定数据或计算属性的变化，并执行相应的回调函数的场景。 watchEffect适用于自动追踪响应式数据并触发副作用的场景，如执行异步操作或更新UI。 综上所述，选择watch或watchEffect取决于具体的使用场景和对API控制的需求。如果需要对响应式数据进行细粒度的控制，可以使用watch API；如果只是需要自动追踪响应式数据并触发副作用，可以使用watchEffect函数。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-26T02:40:00.000Z"}],["meta",{"property":"article:author","content":"Mr.PDG"}],["meta",{"property":"article:modified_time","content":"2024-03-26T02:40:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-26T02:40:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.PDG\\",\\"url\\":\\"https://674948122.github.io/\\"}]}"]]},"headers":[],"git":{"createdTime":1711420800000,"updatedTime":1711420800000,"contributors":[{"name":"pandegong","email":"674948122@qq.com","commits":1}]},"readingTime":{"minutes":6.6,"words":1979},"filePathRelative":"面试题/vue3.md","localizedDate":"2024年3月26日","excerpt":"<h1> Vue3</h1>\\n<ol>\\n<li>watch和watchEffect的区别</li>\\n</ol>\\n<details class=\\"hint-container details\\"><summary>答案</summary>\\n<p>1.指定依赖项：\\n<code>watch</code>需要开发者明确指定要监听的具体响应式数据，并在回调函数中处理对应的逻辑。\\n<code>watchEffect</code>则会自动追踪在其函数体内部使用的所有响应式数据，无需手动指定依赖项。</p>\\n<p>2.执行时机：\\n<code>watch</code>具有一定的惰性，即只有在数据变化时才会执行回调函数。\\n<code>watchEffect</code>在初始化时一定会执行一次，并且会收集要监听的数据。它更加即时，在页面首次加载时也会执行回调函数，除非设置了<code>immediate: true</code>。</p>\\n<p>3.获取原始值：\\n<code>watchEffect</code>可以直接获取到原始值，而<code>watch</code>需要通过指定监视的属性来获取对应的值。</p>\\n<p>4.取消监听：\\n<code>watchEffect</code>可以通过调用<code>stop</code>函数来取消监听。\\n<code>watch</code>需要通过返回一个取消监听的函数来实现取消监听。</p>\\n<p>5.使用场景：\\n<code>watch</code>适用于需要监听特定数据或计算属性的变化，并执行相应的回调函数的场景。\\n<code>watchEffect</code>适用于自动追踪响应式数据并触发副作用的场景，如执行异步操作或更新UI。</p>\\n<p>综上所述，选择<code>watch</code>或<code>watchEffect</code>取决于具体的使用场景和对API控制的需求。如果需要对响应式数据进行细粒度的控制，可以使用<code>watch</code> API；如果只是需要自动追踪响应式数据并触发副作用，可以使用<code>watchEffect</code>函数。</p>\\n</details>","autoDesc":true}');export{t as data};
