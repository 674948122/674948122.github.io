import{_ as n,Q as a,a2 as s,a4 as e}from"./framework-a091056b.js";const t={},i=e(`<h1 id="内存溢出和内存泄漏" tabindex="-1"><a class="header-anchor" href="#内存溢出和内存泄漏" aria-hidden="true">#</a> 内存溢出和内存泄漏</h1><h2 id="_1-内存溢出" tabindex="-1"><a class="header-anchor" href="#_1-内存溢出" aria-hidden="true">#</a> 1.内存溢出</h2><p>一种程序运行出现的错误</p><p>当程序运行需要的内存超过了剩余的内存时，就抛出内存溢出的错误。</p><h2 id="_2-内存泄漏" tabindex="-1"><a class="header-anchor" href="#_2-内存泄漏" aria-hidden="true">#</a> 2.内存泄漏</h2><ul><li><p>占用的内存没有及时释放</p></li><li><p>内存泄漏积累多了就容易导致内存溢出</p></li></ul><h2 id="_3-常见的内存泄漏" tabindex="-1"><a class="header-anchor" href="#_3-常见的内存泄漏" aria-hidden="true">#</a> 3.常见的内存泄漏</h2><ul><li>意外的全局变量</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//这里的a是一个全局变量，占用了大量的全局变量空间，从而导致内存泄漏</span>
 a<span class="token operator">=</span>jnew <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">1000000</span><span class="token punctuation">)</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>没有及时清理的计时器或回调函数。计时器多了就会占用太多的内存，也会造成内存泄漏。</li><li>没有及时卸载无用的事件绑定，会造成内存的泄漏。</li><li>由于闭包的存在，且没有即使处理，这时闭包一直都在内存当中，数据多了，就会造成内存的泄漏。</li><li><code>console.log()</code>导致内存引用，会造成内存的泄漏。</li></ul>`,10),c=[i];function l(o,p){return a(),s("div",null,c)}const d=n(t,[["render",l],["__file","内存溢出和内存泄漏.html.vue"]]);export{d as default};
